#!/usr/bin/python
###############################################################################
#
# amplishot.py - Pipeline for generating full-length 16S sequences and performing
#                community abundance measurements on the output#
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Connor Skennerton"
__copyright__ = "Copyright 2012-2013"
__credits__ = ["Connor Skennerton"]
__license__ = "GPL3"
__version__ = "0.0.1"
__maintainer__ = "Connor Skennerton"
__email__ = "c.skennerton@gmail.com"
__status__ = "Development"

###############################################################################

import argparse
import sys
import tempfile
import os
import shutil
from cogent.parse.fastq import MinimalFastqParser

from amplishot import pandaseq, conserved_sequences
import amplishot.search.wumanber as wumanber
#import os
#import errno

#import numpy as np
#np.seterr(all='raise')     

#import matplotlib as mpl
#import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import axes3d, Axes3D
#from pylab import plot,subplot,axis,stem,show,figure


###############################################################################
###############################################################################
###############################################################################
###############################################################################

###############################################################################
###############################################################################
###############################################################################
###############################################################################
def panda(args):
    panda = pandaseq.Pandaseq()
    panda.Parameters['-o'].on(args.olap)
    panda.Parameters['-l'].on(args.minlen)
    panda.Parameters['-f'].on(args.read_1)  
    panda.Parameters['-r'].on(args.read_2)
    return panda()

def make_partition_files(names, directory=None):
    ret = dict()
    for i in names:
        os.mkdir(os.path.join(directory,i))
        ret[i] = open(os.path.join(directory,i,'in.fa'), 'w')

    os.mkdir(os.path.join(directory,'nomatch'))
    ret['nomatch'] = open(os.path.join(directory, 'nomatch','in.fa'), 'w')
        
    return ret

def partition(infp, tempdir=None):
    """split the dataset based on the presence of conserved marker genes
       infile - input file object
       partitionFiles - a dictionary containing the file names for outputing
       partitioned fasta reads
       tempdir - output directory for partitions, if not set makes a tempdir
    """
    if tempdir is None:
        tempdir = tempfile.mkdtemp()

    tcs = conserved_sequences.ConservedSequences()
    outfiles = make_partition_files(tcs.positions, tempdir)
    seqs = tcs.conserved_sequences.keys()
    wu = wumanber.WuManber(seqs)
    count = 0

    if isinstance(infp, str):
        infp = open(infp)
    
    for name, seq, qual in MinimalFastqParser(infp, strict=False):
        ret = wu.search_text(str(seq))
        if ret is not None:
            count += 1
            outfiles[str(tcs.conserved_sequences[ret[1]].pos)].write('>%s\n%s\n' % (name, seq))
        else:
            outfiles['nomatch'].write('>%s\n%s\n' % (name, seq))

    print 'Able to Partition %i reads into %i bins' % (count, len(outfiles) - 1)
    for f in outfiles.values():
        f.close()

    return tempdir

def doWork( args ):
    """ Main wrapper"""
    # generate fragment consensus sequences - pandaseq
    #panda_out = panda(args)

    # dataset partitioning based on conserved primer presence
    partition_outdir = partition(args.infile, './')
    
    #shutil.rmtree(partition_outdir)
    # dataset reduction - cd-hit - each partition - threaded

    # generate overlaps - phrap - each partition - threaded

    #combined assemblies - phrap

    #chimera checking - uchime, decipher, chimeraslayer

    #read alignment - bwa

    #generate abundance based on coverage

    #assign taxonomy

    #generte OTU table

    return 0

###############################################################################
###############################################################################
###############################################################################
###############################################################################

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    #parser.add_argument('positional_arg', help="Required")
    #parser.add_argument('positional_arg2', type=int, help="Integer argument")
    #parser.add_argument('positional_arg3', nargs='+', help="Multiple values")
    parser.add_argument('-i', '--infile', dest='infile', 
            help="input file containing overlapped reads from pandaseq")
    
    # parse the arguments
    args = parser.parse_args()        

    # do what we came here to do
    doWork(args)

###############################################################################
###############################################################################
###############################################################################
###############################################################################
